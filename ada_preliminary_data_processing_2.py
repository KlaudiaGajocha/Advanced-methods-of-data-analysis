# -*- coding: utf-8 -*-
"""ADA - Preliminary data processing 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cUxJ0UTDD6702FPk2CFzmBHyPp73SIRw
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

Dane = pd.read_csv('daneGooglePlay.csv', sep=';')

Dane

Dane.isna()

Dane.isnull()

Dane.isnull().sum()

Dane2=Dane.dropna(axis=0)

Dane2

Dane2.isna()

Dane2.isnull().sum()

Dane2.fillna(Dane.mode())

Dane2.agg(['std'])

Dane2.quantile([0.01, 0.25, 0.5, 0.75, 0.99])

q1 = Dane2.quantile(0.25) # wartości zmiennej na granicy pierwszego i drugiego kwartyla
q3 = Dane2.quantile(0.75) # wartości zmiennej na granicy trzeciego i czwartego kwartyla
iqr = q3 - q1 # rozstęp międzykwartylowy

iqr

low_boundary = (q1 - 1.5 * iqr)
upp_boundary = (q3 + 1.5 * iqr)
num_of_outliers_L = (Dane2[iqr.index] < low_boundary).sum()
num_of_outliers_U = (Dane2[iqr.index] > upp_boundary).sum()
outliers_15iqr = pd.DataFrame({'lower_boundary':low_boundary, 'upper_boundary':upp_boundary,'num_of_outliers_L':num_of_outliers_L, 'num_of_outliers_U':num_of_outliers_U})

outliers_15iqr

import matplotlib.pyplot as plt

plt.show()

Dane2.boxplot()

import scipy.stats as stats
from scipy import stats

Dane2['Reviews'] = stats.zscore(Dane2['Reviews'])
print(Dane2.head())

Dane2['Rating'] = stats.zscore(Dane2['Rating'])
print(Dane.head())

print(stats.zscore(Dane2['Reviews']))

print(stats.zscore(Dane2['Rating']))

X=((Dane2.Reviews-min(Dane2.Reviews))/(max(Dane2.Reviews)-min(Dane2.Reviews)))

X

Dane2.dtypes

import numpy as np
kolumnyObject= Dane2.select_dtypes(include=np.object).columns.tolist()
Dane2[kolumnyObject] = Dane2[kolumnyObject].astype('string')

Dane2.duplicated()

Dane2.duplicated().sum()

Dane3=Dane2.drop_duplicates()

Dane3.duplicated().sum()

Dane3

import pandas as pd

pd.get_dummies(Dane3)

s1 = ['Rating', 'Reviews', np.nan]

pd.get_dummies(s1)

pd.get_dummies(s1, dummy_na=True)

categorical_columns = ['Type', 'Content Rating']

for column in categorical_columns:

    tempdf = pd.get_dummies(Dane2[column], prefix=column)

    Dane2 = pd.merge(

        left=Dane2,

        right=tempdf,

        left_index=True,

        right_index=True,

    )

    Dane3 = Dane2.drop(columns=column)

print(Dane3)

Dane3

import numpy as np
import pandas as pd

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), [0])], remainder='passthrough')

columnTransformer